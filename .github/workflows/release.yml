name: Release Packages

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      dryRun:
        type: choice
        description: 'Dry run'
        required: true
        default: 'false'
        options:
          - 'true'
          - 'false'

env:
  NX_NON_NATIVE_HASHER: true

jobs:
  dry-run-release:
    if: |
      github.repository == 'code-pushup/cli' && (
        github.event_name == 'pull_request' ||
        (github.event_name == 'workflow_dispatch' && github.event.inputs.dryRun == 'true')
      )
    name: Dry run release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm
      - name: Install dependencies
        run: npm ci
      - name: Execute version target on all affected packages and release them
        run: npx nx affected --base=latest --target=version --parallel=1 --dryRun
  release:
    if: |
      github.repository == 'code-pushup/cli' && (
        (github.event_name == 'workflow_dispatch' && github.event.inputs.dryRun == 'false') ||
        (github.event_name == 'push')
      )
    name: Release packages
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Generate a token
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.GH_APP_ID }}
          private-key: ${{ secrets.GH_APP_PRIVATE_KEY }}
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.generate_token.outputs.token }}
      - name: Set up Git
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm
      - name: Install dependencies
        run: npm ci
      - name: Execute version target on all affected packages and release them
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        # un-exclude packages when they're ready for public release
        run: npx nx affected --base=latest --target=version --exclude=plugin-lighthouse,nx-plugin --parallel=1
      - name: Tag latest
        shell: bash
        run: |
          git tag -f latest
          git push origin latest --force
