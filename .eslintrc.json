{
  "root": true,
  "ignorePatterns": ["**/*"],
  "plugins": ["@nx"],
  "overrides": [
    {
      "files": ["*.ts", "*.tsx", "*.js", "*.jsx"],
      "rules": {
        "@nx/enforce-module-boundaries": [
          "error",
          {
            "enforceBuildableLibDependency": true,
            "allow": [],
            "depConstraints": [
              {
                "sourceTag": "scope:shared",
                "onlyDependOnLibsWithTags": ["scope:shared"]
              },
              {
                "sourceTag": "scope:core",
                "onlyDependOnLibsWithTags": ["scope:core", "scope:shared"]
              },
              {
                "sourceTag": "scope:plugin",
                "onlyDependOnLibsWithTags": ["scope:shared"]
              },
              {
                "sourceTag": "scope:tooling",
                "onlyDependOnLibsWithTags": ["scope:shared"]
              },
              {
                "sourceTag": "type:e2e",
                "onlyDependOnLibsWithTags": ["type:app", "type:feature"]
              },
              {
                "sourceTag": "type:app",
                "onlyDependOnLibsWithTags": ["type:feature", "type:util"]
              },
              {
                "sourceTag": "type:feature",
                "onlyDependOnLibsWithTags": ["type:util"]
              },
              {
                "sourceTag": "type:util",
                "onlyDependOnLibsWithTags": ["type:util"]
              }
            ]
          }
        ]
      }
    },
    {
      "files": ["*.ts", "*.tsx"],
      "extends": [
        "plugin:@nx/typescript",
        "plugin:@typescript-eslint/recommended-requiring-type-checking",
        "plugin:@typescript-eslint/strict"
      ],
      "rules": {
        // override rules from extended configs
        "@typescript-eslint/consistent-type-definitions": ["warn", "type"],
        "@typescript-eslint/prefer-nullish-coalescing": [
          "warn",
          { "ignorePrimitives": { "string": true } }
        ],
        "@typescript-eslint/consistent-indexed-object-style": "off",
        "@typescript-eslint/unbound-method": "off",
        // additional rules
        "arrow-body-style": ["warn", "as-needed"],
        "complexity": "warn",
        "curly": "warn",
        "eqeqeq": ["error", "always", { "null": "never" }],
        "guard-for-in": "error",
        "max-depth": "warn",
        "max-lines": ["warn", { "skipBlankLines": true, "skipComments": true }],
        "max-lines-per-function": [
          "warn",
          { "skipBlankLines": true, "skipComments": true }
        ],
        "max-nested-callbacks": ["warn", { "max": 3 }],
        "no-bitwise": "warn",
        "no-console": ["warn", { "allow": ["error", "warn", "info"] }],
        "no-duplicate-imports": "warn",
        "no-eval": "error",
        "no-magic-numbers": [
          "warn",
          {
            "ignore": [-1, 0, 1, 2, 7, 10, 24, 60, 100, 1000, 3600],
            "ignoreDefaultValues": true,
            "enforceConst": true,
            "detectObjects": true
          }
        ],
        "no-param-reassign": ["error", { "props": true }],
        "no-sequences": "error",
        "no-template-curly-in-string": "error",
        "no-undef-init": "warn",
        "no-unreachable-loop": "error",
        "prefer-template": "warn",
        "radix": "warn",
        "yoda": "warn",
        "@typescript-eslint/no-require-imports": "error",
        "@typescript-eslint/default-param-last": "warn",
        "@typescript-eslint/method-signature-style": "warn",
        "@typescript-eslint/no-confusing-void-expression": "warn",
        "@typescript-eslint/no-shadow": "warn",
        "@typescript-eslint/no-unused-expressions": "warn",
        "@typescript-eslint/naming-convention": [
          "warn",
          {
            "selector": [
              "variableLike",
              "method",
              "typeProperty",
              "parameterProperty",
              "classProperty"
            ],
            "format": ["camelCase"]
          },
          {
            "selector": "variable",
            "format": ["camelCase", "UPPER_CASE"]
          },
          {
            "selector": "typeLike",
            "format": ["PascalCase"]
          },
          {
            "selector": "enumMember",
            "format": ["PascalCase"]
          },
          {
            "selector": "parameter",
            "modifiers": ["unused"],
            "format": null,
            "custom": {
              "regex": "^(_+|[a-z][a-zA-Z0-9]*)$",
              "match": true
            }
          },
          {
            "selector": "objectLiteralProperty",
            "modifiers": ["requiresQuotes"],
            "format": null
          },
          {
            "selector": ["variable", "parameter"],
            "modifiers": ["destructured"],
            "format": null
          }
        ]
      }
    },
    {
      "files": ["*.spec.ts", "*.mock.ts", "test/**/*.ts"],
      "rules": {
        // less strict rules for tests
        "no-magic-numbers": "off",
        "max-lines-per-function": "off",
        "curly": "off",
        "@typescript-eslint/no-unsafe-assignment": "off",
        "@typescript-eslint/no-unsafe-return": "off",
        "@typescript-eslint/no-unsafe-member-access": "off",
        "@typescript-eslint/require-await": "warn"
      }
    },
    {
      "files": ["*.js", "*.jsx"],
      "extends": ["plugin:@nx/javascript"],
      "rules": {}
    },
    {
      "files": "*.json",
      "parser": "jsonc-eslint-parser",
      "rules": {}
    }
  ]
}
