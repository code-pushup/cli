// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`report-to-stdout > should contain all sections when using the fixture report 1`] = `
"[1mCode Pushup Report[22m - @code-pushup/core@0.1.0
[3m[90m---[39m[23m
[3m[90mPackage Name: @code-pushup/core[39m[23m
[3m[90mVersion: 0.1.0[39m[23m
[3m[90mCommit: feat(cli): add logic for markdown report - 7eba125ad5643c2f90cb21389fc3442d786f43f9[39m[23m
[3m[90mDate: 2023-10-18T07:49:45.506Z[39m[23m
[3m[90mDuration: 1652ms[39m[23m
[3m[90mPlugins: 2[39m[23m
[3m[90mAudits: 52[39m[23m
[3m[90m---[39m[23m


 Category            Score               Audits
 Performance         1                   2/1
 Bug prevention      19                  16/19
 Code style          13                  13/13


[1mPerformance 1[22m
- Disallow missing \`key\` props in iterators/collection literals (0)
  ESLint rule **jsx-key**, from _react_ plugin.
  https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-key.md 

[1mBug prevention 19[22m
- Disallow assignment operators in conditional expressions (1)
  ESLint rule **no-cond-assign**.
  https://eslint.org/docs/latest/rules/no-cond-assign 

- Disallow reassigning \`const\` variables (1)
  ESLint rule **no-const-assign**.
  https://eslint.org/docs/latest/rules/no-const-assign 

- Disallow the use of \`debugger\` (1)
  ESLint rule **no-debugger**.
  https://eslint.org/docs/latest/rules/no-debugger 

- Disallow invalid regular expression strings in \`RegExp\` constructors (1)
  ESLint rule **no-invalid-regexp**.
  https://eslint.org/docs/latest/rules/no-invalid-regexp 

- Disallow the use of undeclared variables unless mentioned in \`/*global */\` comments (1)
  ESLint rule **no-undef**.
  https://eslint.org/docs/latest/rules/no-undef 

- Disallow loops with a body that allows only one iteration (1)
  ESLint rule **no-unreachable-loop**.
  https://eslint.org/docs/latest/rules/no-unreachable-loop 

- Disallow negating the left operand of relational operators (1)
  ESLint rule **no-unsafe-negation**.
  https://eslint.org/docs/latest/rules/no-unsafe-negation 

- Disallow use of optional chaining in contexts where the \`undefined\` value is not allowed (1)
  ESLint rule **no-unsafe-optional-chaining**.
  https://eslint.org/docs/latest/rules/no-unsafe-optional-chaining 

- Require calls to \`isNaN()\` when checking for \`NaN\` (1)
  ESLint rule **use-isnan**.
  https://eslint.org/docs/latest/rules/use-isnan 

- Enforce comparing \`typeof\` expressions against valid strings (1)
  ESLint rule **valid-typeof**.
  https://eslint.org/docs/latest/rules/valid-typeof 

- Require the use of \`===\` and \`!==\` (1)
  ESLint rule **eqeqeq**.
  https://eslint.org/docs/latest/rules/eqeqeq 

- Disallow missing \`key\` props in iterators/collection literals (2)
  ESLint rule **jsx-key**, from _react_ plugin.
  https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-key.md 

- Disallow missing props validation in a React component definition (1)
  ESLint rule **prop-types**, from _react_ plugin.
  https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prop-types.md 

- Disallow missing React when using JSX (1)
  ESLint rule **react-in-jsx-scope**, from _react_ plugin.
  https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/react-in-jsx-scope.md 

- enforces the Rules of Hooks (2)
  ESLint rule **rules-of-hooks**, from _react-hooks_ plugin.
  https://reactjs.org/docs/hooks-rules.html 

- verifies the list of dependencies for Hooks like useEffect and similar (2)
  ESLint rule **exhaustive-deps**, from _react-hooks_ plugin.
  https://github.com/facebook/react/issues/14920 

[1mCode style 13[22m
- Disallow unused variables (1)
  ESLint rule **no-unused-vars**.
  https://eslint.org/docs/latest/rules/no-unused-vars 

- Require braces around arrow function bodies (1)
  ESLint rule **arrow-body-style**.
  https://eslint.org/docs/latest/rules/arrow-body-style 

- Enforce camelcase naming convention (1)
  ESLint rule **camelcase**.
  https://eslint.org/docs/latest/rules/camelcase 

- Enforce consistent brace style for all control statements (1)
  ESLint rule **curly**.
  https://eslint.org/docs/latest/rules/curly 

- Require the use of \`===\` and \`!==\` (1)
  ESLint rule **eqeqeq**.
  https://eslint.org/docs/latest/rules/eqeqeq 

- Enforce a maximum number of lines of code in a function (1)
  ESLint rule **max-lines-per-function**.
  https://eslint.org/docs/latest/rules/max-lines-per-function 

- Enforce a maximum number of lines per file (1)
  ESLint rule **max-lines**.
  https://eslint.org/docs/latest/rules/max-lines 

- Require or disallow method and property shorthand syntax for object literals (1)
  ESLint rule **object-shorthand**.
  https://eslint.org/docs/latest/rules/object-shorthand 

- Require using arrow functions for callbacks (1)
  ESLint rule **prefer-arrow-callback**.
  https://eslint.org/docs/latest/rules/prefer-arrow-callback 

- Require \`const\` declarations for variables that are never reassigned after declared (1)
  ESLint rule **prefer-const**.
  https://eslint.org/docs/latest/rules/prefer-const 

- Disallow using Object.assign with an object literal as the first argument and prefer the use of object spread instead (1)
  ESLint rule **prefer-object-spread**.
  https://eslint.org/docs/latest/rules/prefer-object-spread 

- Require or disallow \\"Yoda\\" conditions (1)
  ESLint rule **yoda**.
  https://eslint.org/docs/latest/rules/yoda 

- Require \`let\` or \`const\` instead of \`var\` (1)
  ESLint rule **no-var**.
  https://eslint.org/docs/latest/rules/no-var 



Made with ‚ù§Ô∏è by code-pushup.dev"
`;
