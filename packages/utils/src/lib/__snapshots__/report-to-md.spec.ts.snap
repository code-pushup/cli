// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`report-to-md > should contain all sections when using the fixture report > # Code PushUp Report

|🏷 Category|⭐ Score|🛡 Audits|
|:--|:--:|:--:|
|[Performance](#performance)|92 🟢|2|
|[Bug prevention](#bug-prevention)|68 🟡|16|
|[Code style](#code-style)|54 🟡|13|

## 🏷 Categories

**<a name="performance"></a>🟢 Performance: 92**



- 🟢 Performance (_Lighthouse_)

  - 🟨 [First Contentful Paint](#first-contentful-paint) - **1.2 s**

  - 🟨 [Largest Contentful Paint](#largest-contentful-paint) - **1.5 s**

  - 🟩 [Speed Index](#speed-index) - **1.2 s**

  - 🟩 [Total Blocking Time](#total-blocking-time) - **0 ms**

  - 🟩 [Cumulative Layout Shift](#cumulative-layout-shift) - **0**



- 🟥 [Disallow missing \`key\` props in iterators/collection literals](#react-jsx-key) (_ESLint_) - **1 warning**

**<a name="bug-prevention"></a>🟡 Bug prevention: 68**



- 🟩 [Disallow assignment operators in conditional expressions](#no-cond-assign) (_ESLint_) - **0**

- 🟩 [Disallow reassigning \`const\` variables](#no-const-assign) (_ESLint_) - **0**

- 🟩 [Disallow the use of \`debugger\`](#no-debugger) (_ESLint_) - **0**

- 🟩 [Disallow invalid regular expression strings in \`RegExp\` constructors](#no-invalid-regexp) (_ESLint_) - **0**

- 🟩 [Disallow the use of undeclared variables unless mentioned in \`/*global */\` comments](#no-undef) (_ESLint_) - **0**

- 🟩 [Disallow loops with a body that allows only one iteration](#no-unreachable-loop) (_ESLint_) - **0**

- 🟩 [Disallow negating the left operand of relational operators](#no-unsafe-negation) (_ESLint_) - **0**

- 🟩 [Disallow use of optional chaining in contexts where the \`undefined\` value is not allowed](#no-unsafe-optional-chaining) (_ESLint_) - **0**

- 🟩 [Require calls to \`isNaN()\` when checking for \`NaN\`](#use-isnan) (_ESLint_) - **0**

- 🟩 [Enforce comparing \`typeof\` expressions against valid strings](#valid-typeof) (_ESLint_) - **0**

- 🟥 [Require the use of \`===\` and \`!==\`](#eqeqeq) (_ESLint_) - **1 warning**

- 🟥 [Disallow missing \`key\` props in iterators/collection literals](#react-jsx-key) (_ESLint_) - **1 warning**

- 🟥 [Disallow missing props validation in a React component definition](#react-prop-types) (_ESLint_) - **6 warnings**

- 🟩 [Disallow missing React when using JSX](#react-react-in-jsx-scope) (_ESLint_) - **0**

- 🟩 [enforces the Rules of Hooks](#react-hooks-rules-of-hooks) (_ESLint_) - **0**

- 🟥 [verifies the list of dependencies for Hooks like useEffect and similar](#react-hooks-exhaustive-deps) (_ESLint_) - **2 warnings**

**<a name="code-style"></a>🟡 Code style: 54**



- 🟥 [Disallow unused variables](#no-unused-vars) (_ESLint_) - **1 warning**

- 🟥 [Require braces around arrow function bodies](#arrow-body-style) (_ESLint_) - **1 warning**

- 🟩 [Enforce camelcase naming convention](#camelcase) (_ESLint_) - **0**

- 🟩 [Enforce consistent brace style for all control statements](#curly) (_ESLint_) - **0**

- 🟥 [Require the use of \`===\` and \`!==\`](#eqeqeq) (_ESLint_) - **1 warning**

- 🟥 [Enforce a maximum number of lines of code in a function](#max-lines-per-function) (_ESLint_) - **1 warning**

- 🟩 [Enforce a maximum number of lines per file](#max-lines) (_ESLint_) - **0**

- 🟥 [Require or disallow method and property shorthand syntax for object literals](#object-shorthand) (_ESLint_) - **3 warnings**

- 🟩 [Require using arrow functions for callbacks](#prefer-arrow-callback) (_ESLint_) - **0**

- 🟥 [Require \`const\` declarations for variables that are never reassigned after declared](#prefer-const) (_ESLint_) - **1 warning**

- 🟩 [Disallow using Object.assign with an object literal as the first argument and prefer the use of object spread instead](#prefer-object-spread) (_ESLint_) - **0**

- 🟩 [Require or disallow "Yoda" conditions](#yoda) (_ESLint_) - **0**

- 🟩 [Require \`let\` or \`const\` instead of \`var\`](#no-var) (_ESLint_) - **0**





## 🛡️ Audits

### <a name="no-cond-assign"></a>Disallow assignment operators in conditional expressions (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name="no-const-assign"></a>Disallow reassigning \`const\` variables (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name="no-debugger"></a>Disallow the use of \`debugger\` (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name="no-invalid-regexp"></a>Disallow invalid regular expression strings in \`RegExp\` constructors (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name="no-undef"></a>Disallow the use of undeclared variables unless mentioned in \`/*global */\` comments (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name="no-unreachable-loop"></a>Disallow loops with a body that allows only one iteration (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name="no-unsafe-negation"></a>Disallow negating the left operand of relational operators (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name="no-unsafe-optional-chaining"></a>Disallow use of optional chaining in contexts where the \`undefined\` value is not allowed (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name="no-unused-vars"></a>Disallow unused variables (ESLint)

<details>
<summary>🟥 1 warning (score: 0)</summary>
content
</details>


### <a name="use-isnan"></a>Require calls to \`isNaN()\` when checking for \`NaN\` (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name="valid-typeof"></a>Enforce comparing \`typeof\` expressions against valid strings (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name="arrow-body-style"></a>Require braces around arrow function bodies (ESLint)

<details>
<summary>🟥 1 warning (score: 0)</summary>
content
</details>


### <a name="camelcase"></a>Enforce camelcase naming convention (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name="curly"></a>Enforce consistent brace style for all control statements (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name="eqeqeq"></a>Require the use of \`===\` and \`!==\` (ESLint)

<details>
<summary>🟥 1 warning (score: 0)</summary>
content
</details>


### <a name="max-lines-per-function"></a>Enforce a maximum number of lines of code in a function (ESLint)

<details>
<summary>🟥 1 warning (score: 0)</summary>
content
</details>


### <a name="max-lines"></a>Enforce a maximum number of lines per file (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name="no-shadow"></a>Disallow variable declarations from shadowing variables declared in the outer scope (ESLint)

<details>
<summary>🟥 3 warnings (score: 0)</summary>
content
</details>


### <a name="no-var"></a>Require \`let\` or \`const\` instead of \`var\` (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name="object-shorthand"></a>Require or disallow method and property shorthand syntax for object literals (ESLint)

<details>
<summary>🟥 3 warnings (score: 0)</summary>
content
</details>


### <a name="prefer-arrow-callback"></a>Require using arrow functions for callbacks (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name="prefer-const"></a>Require \`const\` declarations for variables that are never reassigned after declared (ESLint)

<details>
<summary>🟥 1 warning (score: 0)</summary>
content
</details>


### <a name="prefer-object-spread"></a>Disallow using Object.assign with an object literal as the first argument and prefer the use of object spread instead (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name="yoda"></a>Require or disallow "Yoda" conditions (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name="react-jsx-key"></a>Disallow missing \`key\` props in iterators/collection literals (ESLint)

<details>
<summary>🟥 1 warning (score: 0)</summary>
content
</details>


### <a name="react-prop-types"></a>Disallow missing props validation in a React component definition (ESLint)

<details>
<summary>🟥 6 warnings (score: 0)</summary>
content
</details>


### <a name="react-react-in-jsx-scope"></a>Disallow missing React when using JSX (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name="react-hooks-rules-of-hooks"></a>enforces the Rules of Hooks (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name="react-hooks-exhaustive-deps"></a>verifies the list of dependencies for Hooks like useEffect and similar (ESLint)

<details>
<summary>🟥 2 warnings (score: 0)</summary>
content
</details>


### <a name="react-display-name"></a>Disallow missing displayName in a React component definition (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name="react-jsx-no-comment-textnodes"></a>Disallow comments from being inserted as text nodes (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name="react-jsx-no-duplicate-props"></a>Disallow duplicate properties in JSX (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name="react-jsx-no-target-blank"></a>Disallow \`target="_blank"\` attribute without \`rel="noreferrer"\` (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name="react-jsx-no-undef"></a>Disallow undeclared variables in JSX (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name="react-jsx-uses-react"></a>Disallow React to be incorrectly marked as unused (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name="react-jsx-uses-vars"></a>Disallow variables used in JSX to be incorrectly marked as unused (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name="react-no-children-prop"></a>Disallow passing of children as props (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name="react-no-danger-with-children"></a>Disallow when a DOM element is using both children and dangerouslySetInnerHTML (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name="react-no-deprecated"></a>Disallow usage of deprecated methods (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name="react-no-direct-mutation-state"></a>Disallow direct mutation of this.state (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name="react-no-find-dom-node"></a>Disallow usage of findDOMNode (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name="react-no-is-mounted"></a>Disallow usage of isMounted (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name="react-no-render-return-value"></a>Disallow usage of the return value of ReactDOM.render (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name="react-no-string-refs"></a>Disallow using string references (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name="react-no-unescaped-entities"></a>Disallow unescaped HTML entities from appearing in markup (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name="react-no-unknown-property"></a>Disallow usage of unknown DOM property (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name="react-require-render-return"></a>Enforce ES5 or ES6 class for returning value in render function (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name="first-contentful-paint"></a>First Contentful Paint (Lighthouse)

<details>
<summary>🟨 1.2 s (score: 76)</summary>
content
</details>


### <a name="largest-contentful-paint"></a>Largest Contentful Paint (Lighthouse)

<details>
<summary>🟨 1.5 s (score: 81)</summary>
content
</details>


### <a name="total-blocking-time"></a>Total Blocking Time (Lighthouse)

<details>
<summary>🟩 0 ms (score: 100)</summary>
content
</details>


### <a name="cumulative-layout-shift"></a>Cumulative Layout Shift (Lighthouse)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name="speed-index"></a>Speed Index (Lighthouse)

<details>
<summary>🟩 1.2 s (score: 93)</summary>
content
</details>






## About

Report was created by [Code PushUp](https://github.com/flowup/quality-metrics-cli#readme) on Wed Nov 01 2023 10:21:14 GMT+0100 (Central European Standard Time)

|Commit|Version|Duration|Plugins|Categories|Audits|
|:--:|:--:|:--:|:--:|:--:|:--:|
|_Implement todos list_ ([3ac01d1](https://github.com/flowup/todos-app/commit/3ac01d192698e0a923bd410f79594371480a6e4c))|0.1.0|1.65s|2|3|52|

The following plugins were run:

|Plugin|Audits|Version|Duration|
|:--:|:--:|:--:|:--:|
|ESLint|47|0.1.0|0.37s|
|Lighthouse|5|0.1.0|1.23s|

Made with ❤️ by [code-pushup.dev](code-pushup.dev) 1`] = `
"# Code PushUp Report

|🏷 Category|⭐ Score|🛡 Audits|
|:--|:--:|:--:|
|[Performance](#performance)|92 🟢|2|
|[Bug prevention](#bug-prevention)|68 🟡|16|
|[Code style](#code-style)|54 🟡|13|

## 🏷 Categories

**<a name=\\"performance\\"></a>🟢 Performance: 92**



- 🟢 Performance (_Lighthouse_)

  - 🟨 [First Contentful Paint](#first-contentful-paint) - **1.2 s**

  - 🟨 [Largest Contentful Paint](#largest-contentful-paint) - **1.5 s**

  - 🟩 [Speed Index](#speed-index) - **1.2 s**

  - 🟩 [Total Blocking Time](#total-blocking-time) - **0 ms**

  - 🟩 [Cumulative Layout Shift](#cumulative-layout-shift) - **0**



- 🟥 [Disallow missing \`key\` props in iterators/collection literals](#react-jsx-key) (_ESLint_) - **1 warning**

**<a name=\\"bug-prevention\\"></a>🟡 Bug prevention: 68**



- 🟩 [Disallow assignment operators in conditional expressions](#no-cond-assign) (_ESLint_) - **0**

- 🟩 [Disallow reassigning \`const\` variables](#no-const-assign) (_ESLint_) - **0**

- 🟩 [Disallow the use of \`debugger\`](#no-debugger) (_ESLint_) - **0**

- 🟩 [Disallow invalid regular expression strings in \`RegExp\` constructors](#no-invalid-regexp) (_ESLint_) - **0**

- 🟩 [Disallow the use of undeclared variables unless mentioned in \`/*global */\` comments](#no-undef) (_ESLint_) - **0**

- 🟩 [Disallow loops with a body that allows only one iteration](#no-unreachable-loop) (_ESLint_) - **0**

- 🟩 [Disallow negating the left operand of relational operators](#no-unsafe-negation) (_ESLint_) - **0**

- 🟩 [Disallow use of optional chaining in contexts where the \`undefined\` value is not allowed](#no-unsafe-optional-chaining) (_ESLint_) - **0**

- 🟩 [Require calls to \`isNaN()\` when checking for \`NaN\`](#use-isnan) (_ESLint_) - **0**

- 🟩 [Enforce comparing \`typeof\` expressions against valid strings](#valid-typeof) (_ESLint_) - **0**

- 🟥 [Require the use of \`===\` and \`!==\`](#eqeqeq) (_ESLint_) - **1 warning**

- 🟥 [Disallow missing \`key\` props in iterators/collection literals](#react-jsx-key) (_ESLint_) - **1 warning**

- 🟥 [Disallow missing props validation in a React component definition](#react-prop-types) (_ESLint_) - **6 warnings**

- 🟩 [Disallow missing React when using JSX](#react-react-in-jsx-scope) (_ESLint_) - **0**

- 🟩 [enforces the Rules of Hooks](#react-hooks-rules-of-hooks) (_ESLint_) - **0**

- 🟥 [verifies the list of dependencies for Hooks like useEffect and similar](#react-hooks-exhaustive-deps) (_ESLint_) - **2 warnings**

**<a name=\\"code-style\\"></a>🟡 Code style: 54**



- 🟥 [Disallow unused variables](#no-unused-vars) (_ESLint_) - **1 warning**

- 🟥 [Require braces around arrow function bodies](#arrow-body-style) (_ESLint_) - **1 warning**

- 🟩 [Enforce camelcase naming convention](#camelcase) (_ESLint_) - **0**

- 🟩 [Enforce consistent brace style for all control statements](#curly) (_ESLint_) - **0**

- 🟥 [Require the use of \`===\` and \`!==\`](#eqeqeq) (_ESLint_) - **1 warning**

- 🟥 [Enforce a maximum number of lines of code in a function](#max-lines-per-function) (_ESLint_) - **1 warning**

- 🟩 [Enforce a maximum number of lines per file](#max-lines) (_ESLint_) - **0**

- 🟥 [Require or disallow method and property shorthand syntax for object literals](#object-shorthand) (_ESLint_) - **3 warnings**

- 🟩 [Require using arrow functions for callbacks](#prefer-arrow-callback) (_ESLint_) - **0**

- 🟥 [Require \`const\` declarations for variables that are never reassigned after declared](#prefer-const) (_ESLint_) - **1 warning**

- 🟩 [Disallow using Object.assign with an object literal as the first argument and prefer the use of object spread instead](#prefer-object-spread) (_ESLint_) - **0**

- 🟩 [Require or disallow \\"Yoda\\" conditions](#yoda) (_ESLint_) - **0**

- 🟩 [Require \`let\` or \`const\` instead of \`var\`](#no-var) (_ESLint_) - **0**





## 🛡️ Audits

### <a name=\\"no-cond-assign\\"></a>Disallow assignment operators in conditional expressions (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name=\\"no-const-assign\\"></a>Disallow reassigning \`const\` variables (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name=\\"no-debugger\\"></a>Disallow the use of \`debugger\` (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name=\\"no-invalid-regexp\\"></a>Disallow invalid regular expression strings in \`RegExp\` constructors (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name=\\"no-undef\\"></a>Disallow the use of undeclared variables unless mentioned in \`/*global */\` comments (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name=\\"no-unreachable-loop\\"></a>Disallow loops with a body that allows only one iteration (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name=\\"no-unsafe-negation\\"></a>Disallow negating the left operand of relational operators (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name=\\"no-unsafe-optional-chaining\\"></a>Disallow use of optional chaining in contexts where the \`undefined\` value is not allowed (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name=\\"no-unused-vars\\"></a>Disallow unused variables (ESLint)

<details>
<summary>🟥 1 warning (score: 0)</summary>
content
</details>


### <a name=\\"use-isnan\\"></a>Require calls to \`isNaN()\` when checking for \`NaN\` (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name=\\"valid-typeof\\"></a>Enforce comparing \`typeof\` expressions against valid strings (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name=\\"arrow-body-style\\"></a>Require braces around arrow function bodies (ESLint)

<details>
<summary>🟥 1 warning (score: 0)</summary>
content
</details>


### <a name=\\"camelcase\\"></a>Enforce camelcase naming convention (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name=\\"curly\\"></a>Enforce consistent brace style for all control statements (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name=\\"eqeqeq\\"></a>Require the use of \`===\` and \`!==\` (ESLint)

<details>
<summary>🟥 1 warning (score: 0)</summary>
content
</details>


### <a name=\\"max-lines-per-function\\"></a>Enforce a maximum number of lines of code in a function (ESLint)

<details>
<summary>🟥 1 warning (score: 0)</summary>
content
</details>


### <a name=\\"max-lines\\"></a>Enforce a maximum number of lines per file (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name=\\"no-shadow\\"></a>Disallow variable declarations from shadowing variables declared in the outer scope (ESLint)

<details>
<summary>🟥 3 warnings (score: 0)</summary>
content
</details>


### <a name=\\"no-var\\"></a>Require \`let\` or \`const\` instead of \`var\` (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name=\\"object-shorthand\\"></a>Require or disallow method and property shorthand syntax for object literals (ESLint)

<details>
<summary>🟥 3 warnings (score: 0)</summary>
content
</details>


### <a name=\\"prefer-arrow-callback\\"></a>Require using arrow functions for callbacks (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name=\\"prefer-const\\"></a>Require \`const\` declarations for variables that are never reassigned after declared (ESLint)

<details>
<summary>🟥 1 warning (score: 0)</summary>
content
</details>


### <a name=\\"prefer-object-spread\\"></a>Disallow using Object.assign with an object literal as the first argument and prefer the use of object spread instead (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name=\\"yoda\\"></a>Require or disallow \\"Yoda\\" conditions (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name=\\"react-jsx-key\\"></a>Disallow missing \`key\` props in iterators/collection literals (ESLint)

<details>
<summary>🟥 1 warning (score: 0)</summary>
content
</details>


### <a name=\\"react-prop-types\\"></a>Disallow missing props validation in a React component definition (ESLint)

<details>
<summary>🟥 6 warnings (score: 0)</summary>
content
</details>


### <a name=\\"react-react-in-jsx-scope\\"></a>Disallow missing React when using JSX (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name=\\"react-hooks-rules-of-hooks\\"></a>enforces the Rules of Hooks (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name=\\"react-hooks-exhaustive-deps\\"></a>verifies the list of dependencies for Hooks like useEffect and similar (ESLint)

<details>
<summary>🟥 2 warnings (score: 0)</summary>
content
</details>


### <a name=\\"react-display-name\\"></a>Disallow missing displayName in a React component definition (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name=\\"react-jsx-no-comment-textnodes\\"></a>Disallow comments from being inserted as text nodes (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name=\\"react-jsx-no-duplicate-props\\"></a>Disallow duplicate properties in JSX (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name=\\"react-jsx-no-target-blank\\"></a>Disallow \`target=\\"_blank\\"\` attribute without \`rel=\\"noreferrer\\"\` (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name=\\"react-jsx-no-undef\\"></a>Disallow undeclared variables in JSX (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name=\\"react-jsx-uses-react\\"></a>Disallow React to be incorrectly marked as unused (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name=\\"react-jsx-uses-vars\\"></a>Disallow variables used in JSX to be incorrectly marked as unused (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name=\\"react-no-children-prop\\"></a>Disallow passing of children as props (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name=\\"react-no-danger-with-children\\"></a>Disallow when a DOM element is using both children and dangerouslySetInnerHTML (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name=\\"react-no-deprecated\\"></a>Disallow usage of deprecated methods (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name=\\"react-no-direct-mutation-state\\"></a>Disallow direct mutation of this.state (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name=\\"react-no-find-dom-node\\"></a>Disallow usage of findDOMNode (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name=\\"react-no-is-mounted\\"></a>Disallow usage of isMounted (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name=\\"react-no-render-return-value\\"></a>Disallow usage of the return value of ReactDOM.render (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name=\\"react-no-string-refs\\"></a>Disallow using string references (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name=\\"react-no-unescaped-entities\\"></a>Disallow unescaped HTML entities from appearing in markup (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name=\\"react-no-unknown-property\\"></a>Disallow usage of unknown DOM property (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name=\\"react-require-render-return\\"></a>Enforce ES5 or ES6 class for returning value in render function (ESLint)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name=\\"first-contentful-paint\\"></a>First Contentful Paint (Lighthouse)

<details>
<summary>🟨 1.2 s (score: 76)</summary>
content
</details>


### <a name=\\"largest-contentful-paint\\"></a>Largest Contentful Paint (Lighthouse)

<details>
<summary>🟨 1.5 s (score: 81)</summary>
content
</details>


### <a name=\\"total-blocking-time\\"></a>Total Blocking Time (Lighthouse)

<details>
<summary>🟩 0 ms (score: 100)</summary>
content
</details>


### <a name=\\"cumulative-layout-shift\\"></a>Cumulative Layout Shift (Lighthouse)

<details>
<summary>🟩 0 (score: 100)</summary>
content
</details>


### <a name=\\"speed-index\\"></a>Speed Index (Lighthouse)

<details>
<summary>🟩 1.2 s (score: 93)</summary>
content
</details>






## About

Report was created by [Code PushUp](https://github.com/flowup/quality-metrics-cli#readme) on Wed Nov 01 2023 10:21:14 GMT+0100 (Central European Standard Time)

|Commit|Version|Duration|Plugins|Categories|Audits|
|:--:|:--:|:--:|:--:|:--:|:--:|
|_Implement todos list_ ([3ac01d1](https://github.com/flowup/todos-app/commit/3ac01d192698e0a923bd410f79594371480a6e4c))|0.1.0|1.65s|2|3|52|

The following plugins were run:

|Plugin|Audits|Version|Duration|
|:--:|:--:|:--:|:--:|
|ESLint|47|0.1.0|0.37s|
|Lighthouse|5|0.1.0|1.23s|

Made with ❤️ by [code-pushup.dev](code-pushup.dev)"
`;
