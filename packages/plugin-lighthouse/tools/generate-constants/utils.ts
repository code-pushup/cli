import type { Result } from 'lighthouse';
import { unlink } from 'node:fs/promises';
import { dirname, join } from 'node:path';
import { Audit, CategoryConfig, Group } from '@code-pushup/models';
import {
  ensureDirectoryExists,
  executeProcess,
  readJsonFile,
} from '@code-pushup/utils';
import { LIGHTHOUSE_PLUGIN_SLUG } from '../../src/lib/constants';
import { getLighthouseCliArguments } from '../../src/lib/utils';

export function getConstantsFileContent(lhr: Result): string {
  const {
    audits: lighthouseAudits,
    categories: lighthouseCategories,
    lighthouseVersion,
  } = lhr;
  const audits = Object.entries(lighthouseAudits).map(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    ([_, { id, title, description }]) =>
      ({
        slug: id,
        title,
        description,
      } satisfies Audit),
  );

  const groups = Object.entries(lighthouseCategories).map(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    ([_, { id, title, description, auditRefs }]) =>
      ({
        slug: id,
        title,
        description,
        refs: auditRefs.map(({ id: slug, weight }) => ({
          slug,
          weight,
        })),
      } satisfies Group),
  );

  const categories = Object.entries(lighthouseCategories).map(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    ([_, { id, title, description, manualDescription }]) =>
      ({
        slug: id,
        title,
        description: [description, manualDescription]
          .filter(str => !str || str !== '')
          .join('\n'),
        refs: [
          {
            // group id and external category are the same
            slug: id,
            plugin: LIGHTHOUSE_PLUGIN_SLUG as string,
            type: 'group',
            weight: 1,
          },
        ],
      } satisfies CategoryConfig),
  );

  return [
    '// !DO NOT EDIT!',
    `// This file is autogenerated from [lighthouse](https://github.com/GoogleChrome/lighthouse) version \`${lighthouseVersion}\``,
    `export const audits = ${JSON.stringify(audits, null, 2)};`,
    `export const groups = ${JSON.stringify(groups, null, 2)};`,
    `export const categories = ${JSON.stringify(categories, null, 2)};`,
  ].join('\n');
}

export async function getExampleReport(options?: {
  deleteFile: boolean;
}): Promise<Result> {
  const { deleteFile = true } = options;
  const outputPath = join(
    'tmp',
    'example-lighthouse-report-for-tooling-script.json',
  );

  await ensureDirectoryExists(dirname(outputPath));

  await executeProcess({
    command: 'npx',
    args: getLighthouseCliArguments({
      url: 'chrome://settings',
      outputPath,
      headless: 'new',
    }),
  });

  const report = await readJsonFile<Result>(outputPath);

  if (deleteFile) {
    await unlink(outputPath);
  }

  return report;
}
